ext.gameName = "Game"
version = '0.1.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName = "ludum.dare.Application"

ext.server = 'http://www.bytebreakstudios.com:8081/artifactory'

repositories.maven { url "$server/all" }

ext.gdxVersion = '1.6.4'
dependencies {
    compile group: "com.winger", name: "Winger", version: "0.1.2-SNAPSHOT", changing: true

    compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.edu.sc.seis:macAppBundle:2.1.1"
    }
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task fatJar(type: Jar, dependsOn: 'compileJava') {
    baseName = project.name + "-all"
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        sourceSets.main.output.classesDir
    }
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
fatJar.dependsOn build

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.compile
}
build.dependsOn(copyToLib)

// ////////////////////////////////////
//  DEPLOY TASKS
// ////////////////////////////////////
task macDeploy << {
    def name = "$gameName" + "-" + version + ".app";

    def dir = { String path ->
        def d = new File(project.buildDir, path);
        if (!d.exists()){
            d.mkdirs();
        }
        return d
    }
    def cp = { String src, String dest ->
        copy {
            from project.projectDir.absolutePath + src
            into project.buildDir.absolutePath + dest
        }
    }
    def del = { String path ->
        def d = new File(project.buildDir, path);
        if (d.exists()){
            d.delete()
            println("deleted " + d)
        }
    }
    del("deploy/mac/" + name)

    dir("deploy/mac/" + name + "/Contents/Java");
    dir("deploy/mac/" + name + "/Contents/MacOS");
    dir("deploy/mac/" + name + "/Contents/Resources");

    cp("/deploy/conf/Info.plist", "/deploy/mac/" + name + "/Contents/")
    cp("/deploy/conf/Pkginfo", "/deploy/mac/" + name + "/Contents/")

    cp("/build/libs/" + project.name + "-all-" + version + ".jar", "/deploy/mac/" + name + "/Contents/Java")

    cp("/deploy/executables/JavaAppLauncher", "/deploy/mac/" + name + "/Contents/MacOS")
    cp("/deploy/icons/cross.icns", "/deploy/mac/" + name + "/Contents/Resources")

    new File(project.buildDir, "deploy/mac/" + name).setExecutable(true, false);
}
//macDeploy.dependsOn fatJar

task winAmdDeploy(type:Exec) {
    executable "sh"
    def str = "java -jar deploy/packr.jar "
    str += "-platform windows "
    str += "-jdk \"deploy/jres/openjdk-1.7.0-u80-unofficial-windows-amd64-image.zip\" "
    str += "-executable $gameName "
    str += "-appjar \"build/libs/" + project.name + "-all-" + version + ".jar\" "
    str += "-mainclass \"ludum/dare/Application\" "
    str += "-vmargs \"-Xmx1G\" "
    str += "-resources src/main/resources "
    str += "-outdir build/deploy/windows/amd/$gameName-" + version
    args "-c", str
}

task winIntelDeploy(type:Exec) {
    executable "sh"
    def str = "java -jar deploy/packr.jar "
    str += "-platform windows "
    str += "-jdk \"deploy/jres/openjdk-1.7.0-u80-unofficial-windows-i586-image.zip\" "
    str += "-executable $gameName "
    str += "-appjar \"build/libs/" + project.name + "-all-" + version + ".jar\" "
    str += "-mainclass \"ludum/dare/Application\" "
    str += "-vmargs \"-Xmx1G\" "
    str += "-resources src/main/resources "
    str += "-outdir build/deploy/windows/i586/$gameName-" + version
    args "-c", str
}

task linuxAmdDeploy(type:Exec) {
    executable "sh"
    def str = "java -jar deploy/packr.jar "
    str += "-platform linux64 "
    str += "-jdk \"deploy/jres/openjdk-1.7.0-u80-unofficial-windows-amd64-image.zip\" "
    str += "-executable $gameName "
    str += "-appjar \"build/libs/" + project.name + "-all-" + version + ".jar\" "
    str += "-mainclass \"ludum/dare/Application\" "
    str += "-vmargs \"-Xmx1G\" "
    str += "-resources src/main/resources "
    str += "-outdir build/deploy/linux/amd/$gameName-" + version
    args "-c", str
}

task linuxIntelDeploy(type:Exec) {
    executable "sh"
    def str = "java -jar deploy/packr.jar "
    str += "-platform linux64 "
    str += "-jdk \"deploy/jres/openjdk-1.7.0-u80-unofficial-windows-i586-image.zip\" "
    str += "-executable $gameName "
    str += "-appjar \"build/libs/" + project.name + "-all-" + version + ".jar\" "
    str += "-mainclass \"ludum/dare/Application\" "
    str += "-vmargs \"-Xmx1G\" "
    str += "-resources src/main/resources "
    str += "-outdir build/deploy/linux/i586/$gameName-" + version
    args "-c", str
}


task deploy {
    // don't really need to do anything here, just depends on the other deploys
}
deploy.dependsOn macDeploy
deploy.dependsOn winAmdDeploy
deploy.dependsOn winIntelDeploy
deploy.dependsOn linuxAmdDeploy
deploy.dependsOn linuxIntelDeploy




